// 동기 처리와 비동기 처리
/**
 * 
 * 함수를 호출하면 함수 코드가 평가되어 함수 실행 컨텍스트가 생성된다. 
 * 이때 생성된 함수 실행 컨텍스트는 실행 컨텍스트 스택(콜스택)에 푸시되고 함수 코드가 실행된다.
 * 함수 코드의 실행이 종료하면 함수 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거된다. 
 * 
 * 아래 foo함수와 bar함수는 호출된 순서대로 스택 자료구조인 실행 컨텍스트 스택에 푸시되어 실행된다. 
 */
const foo = () => {};
const bar = () => {};
foo();
bar();
/**
 * 
 * 	->				 ->	 foo 함수 실행 컨텍스트    ->	  			        ->	  bar 함수 실행 컨텍스트     ->	  	
 * 		전역 실행 컨텍스트          전역 실행 컨텍스트   		 	전역 실행 컨텍스트    		 	전역 실행 컨텍스트    		 	전역 실행 컨텍스트 
 * 
 * 
 * 함수가 실행되려면 함수 코드 평가 과정에서 생성된 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되어야한다. 다시 말해, 실행 컨텍스트 스택에 함수 실행 컨텍스트가 푸시되는 것은 바로 함수 실행의 시작을 의미한다.
 * 함수가 호출된 순서대로 순차적으로 실행되는 이유는 함수가 호출된 순서대로 순차적으로 실행되는 이유는 함수가 호출된 순서대로 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되기 때문이다. 이처럼 함수의 실행 순서는 실행 컨텍스트 스택으로 관리한다.
 * 
 * 자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다. 이는 함수를 실행할 수 있는 창구가 단 하나이며, 동시에 2개 이상의 함수를 동시에 실행할 수 없다는 것을 믜미한다. 
 * 실행 컨텍스트 스택의 최상위 요소인 "실행 중인 실행 컨텍스트"를 제외한 모든 실행 컨텍스트는 모두 실행 대기 중인 task 들이다. 
 * 대기 중인 task들은 현재 실행 중인 실행 컨텍스트가 팝되어 실행 컨텍스트 스택에서 제거되면, 다시 말해 현재 실행 중인 함수가 종료되면 비로소 실행되기 시작한다. 
 * 
 * 이처럼 자바스크립트 엔진은 한 번에 하나의 task 만 실행 할 수 있는 싱글 스레드 방식으로 동작한다. 싱글 스레드 방식은 한 번에 하나의 태스크만 실행할 수 있기 때문에 처리에 시간이 걸리는 task를 실행하는 경우 블로킹(작업 중단)이 발생한다.
 * 예를 들어, setTimeout 함수와 유사하게 일정 시정 시간이 경과한 이후에 콜백 함수를 호출하는 sleep 함수를 구현해보자 
 */

//sleep 함수는 일정 시간(delay)이 경과한 이후에 콜백 함수(func)를 호출한다.
function sleep(func, delay){
	//Date.now()는 현재 시간을 숫자(ms)로 반환한다.
	const delayUntil = Date.now() + delay

	// 현재 시간(Date.now())에 delay를 더한 delayUntil이 현재 시간보다 작으면 계속 반복한다. 
	while(Date.now() < delayUntil){
		//일정 시간(delay)이 경과한 이후에 콜백 함수 (func)를 호출한다.
		func()
	}
}

function zoo(){
	console.log('zoo')
}

function zooo(){
	console.log('zooo')
}

//sleep 함수는 3초 이상 실행된다.
sleep(zoo, 3 * 1000);

//zooo 함수는 sleep 함수의 실행이 종료된 이후에 호출되므로 3초 이상 블로킹 된다. 
zooo();
//3초 경과 후 zoo 호출 > zooo호출


/**
 * 
 * 위 예제의 sleep 함수는 3초 후에 zoo함수를 호출한다. 이때 zoo함수는 sleep 함수의 실행이 종료된 이후에 호출되므로 3초 이상 호출되지 못하고 블로킹 된다.
 * 이처럼 현재 실행 중인 task가 종료할 때까지 다음에 실행될 테스크가 대기하는 방식을 동기처리라고 한다. 
 * 동기 처리 방식은 task를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만 앞선 task가 종료할 때까지 이후 task들이 블로킹 된다는 단점이 있다.
 * 
 * 		|-------- delay ---------|  	blocking!
 * 		[		 sleep		]  [zoo] [zooo]
 * 		----------------------------------> time
 */

//타이머 함수 setTimeout은 일정 시간이 경과한 이후에 콜백 함수 zoo를 호출한다.
//타이머 함수 setTimeout은 zooo를 블로킹하지 않는다.

setTimeout(zoo, 3*1000);
zooo()


/***
 * setTimeout 함수는 앞서 살펴본 sleep함수와 유사하게 일정 시간이 경과한 이후에 콜백함수를 호출하지만 setTimeout 함수 이후 task를 블로킹하지 않고 곧바로 실행한다. 
 * 이처럼 현재 실행 중인 task가 종료되지 않은 상태라 해도 다음 task를 곧바로 실해하는 방식을 비동기 (asynchronous)처리라고 한다.
 * 
 * 		|---------------delay------|
 *		| non-blocking! 
 * 		[setTimeout][zooo]         [zoo]
 * 		-------------------------> time
 * 
 * 동기 처리 방식은 task를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만 앞선, task가 종료할 때까지 이후 task들이 블로킹되는 단점이 있었다.
 * 비동기 처리 방식은 현재 실행 중인 task가 종료되지 ㅇ낳은 상태라 해도 다음 task를 바로 실행하므로 블로킹이 발생하지 않는다는 장점이 있지만 task의 실행 순서가 보장되지 않는 단점이 있다.
 * 
 * 비동기 처리를 수행하는 비동기 함수는 전통적으로 콜백 패턴을 사용한다. 비동기 처리를 위한 콜백 해턴은 콜백 헬(callback hell)을 발생시켜 가독성을 나쁘게 하고, 비동기 처리 중 발생한 에러의 예외 처리가 곤란하며,
 * 여러 개의 비동기 처리를 한 번에 처리하는 데도 한계가 있다.
 * 
 * 타이머 함수인 setTimeout과 setInterval, HTTP 요청, 이벤트 핸들러는 비동기 처리 방식으로 동작한다. 비동기 처리는 이벤트 루프와 태스크 큐와 깊은 관계가 있다. 
 */
