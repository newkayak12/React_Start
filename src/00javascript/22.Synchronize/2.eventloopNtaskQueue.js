// 이벤트 루프와 태스크 큐
/**
 * 자바스크립트의 특징 주 하나는 싱글스레드로 동작하는 것이다. 앞서 살펴본 바와 같이 싱글 스레드 방식은 한 번에 하나의 태스크만 처리할 수 있다는 것을 의미한다. 하지만 브라우저가 동작하는 것을 살펴보면 많은 태스크가 동시에 처리되는 것처럼 느껴진다.
 * 예를 들어 HTML 요소가 애니메이션 효과를 통해 움직이면서 이벤트를 처리하기도 하고, HTTP 요청을 통해 서버로부터 데이터를 가지고 오면서 렌더링하기도 한다. 
 * 
 * 이처럼 자바스크립트의 동시성을 지원하는 것이 이벤트 루프이다. 이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나이다.
 * 
 * 구글의 V8 자바스크립트 엔진을 비롯한 대부분의 자바스크립트 엔진은 크게 2가지 영역으로 구분할 수 있다.
 * 
 * 	[callstack]
 * 소스코드 (전역 코드나 함수 코드 등) 평가 과정에서 생성된 실행 컨텍스트가 추가되고 제거되는 스택 자료구조인 실행 컨텍스트 스택이 바로 콜 스택이다.
 * 함수를 호춣하면 함수 실행 컨텍스트가 순차적으로 콜 스택으로 푸시되어 순차적으로 실행된다. 자바스크립트 엔진은 단 하나의 콜 스택을 사용하기 떄문에 최상위 실행 컨텍스트(실행 중인 실행 컨텍스트)가 종료되어 콜 스택에서 
 * 제거되기 전까지 다른 어떤 태스크도 실행되지 않는다.
 * 
 * 	[heap]
 * 힙은 객체가 저장되는 메모리 공간이다. 콜 스택의 요소인 실행 컨텍스트는 힙에 저장된 객체를 참조한다.
 * 메모리에 값을 저장하려면 먼저 값을 저장할 메모리 공간의 크기를 경정해야한다. 객체는 원시 값과는 다릴 크기가 정해져 있지 않으므로 할당해야 할 메모리 공간의 크기를 런타임에 결정(동적 할당)해야 한다. 
 * 따라서 객체가 저장되는 메모리 공간인 힙은 구조화 되어 있지 않다는 특징이 있다.
 * 
 * 
 * 이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히 태스크가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐이다. 
 * 비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js가 담당한다.
 * 예를 들어, 비동기 방식으로 동작하는 setTimeout의 콜백 함수의 평가와 실행은 JS 엔진이 담당하지만 호출 스케줄링을 위한 타이머 설정과 콜백 함수의 등록은 브라우저 또는 Node.js가 담당한다. 
 * 이를 위해 브라우저 환경은 태스크 큐와 이벤트 루프를 제공한다.
 */