// 실행 컨텍스트와 블록 레벨 스코프
/**
 * 
 * var 키워드로 선언한 변수는 오로지 함수 코드 블록만 지역 스코프로 인정하는 함수 레벨 스코프를 따른다. 
 * const, let은 모든 코드 블록(함수, if, for, while, try/catch)등 지역 스코프로 인정하는 블록 레빌 스코프를 따른다. 
 */

let x = 1;
if(true){
	let x = 10;
	console.log(x); //10
	/**
	 * if문의 코드 블록을 위한 블록 레벨 스코프를 생성해야한다.
	 * 이를 위해 선언적 환경 레코드를 갖는 렉시컬 환경을 새롭게 생성하여 기존의 전역 렉시컬 환경을 교체한다. 
	 * 이렇게 새롭게 생성된 블록을 위한 렉시컬 환경의 외부 렉시컬 환경에 대한 참조는 블록문이 실행되기 이전에 전역 렉시컬 환경을 가리킨다. 
	 * 
	 * 또한 해당 블록문 실행이 종료되면 이전의 렉시컬 환경으로 되돌린다. 
	 */
}
console.log(x);//1


/**
 * for문의 변수 선언문에 let 키워드를 사용한 for문은 코드 블록에 반복해서 실행될 때마다 코드 블록을 위한 새로운 렉시컬 환경을 생성한다. 
 * 만약 for문의 코드 블록 내에 정의된 함수가 있다면 이 함수의 상위 스코프는 for문의 코드 블록이 생성한 렉시컬 환경이다.
 * 
 * 이때 함수의 상위 스코프는 for문의 코드블록이 반복해서 실행될 때마다 식별자(for문의 변수 선언 및 for문의 코드 블록 내에서 선언된 지역 변수 등)의 값을 유지해야한다. 
 * 이를 위해 for문의 코드 블록이 반복해서 실행될 때마다 독립적인 렉시컬 환경을 생성하여 식별자의 값을 유지한다. ㅋ
 * 
 * 
 */