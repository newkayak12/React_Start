// Lexical Scope

var x = 1;
function foo(){
	var x = 10;
	bar();
}

function bar(){
	console.log(x);
}

foo();
bar();

//결과는?

/*
	> 1. 함수를 어디서 호출했는자에 따라 함수의 상위 스코프를 결정한다.
		이 방식을 '동적 스코프'라고 한다. 함수를 정의하는 시점에는 함수가 어디서 호출될지 알 수 없다. 따라서 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야하기 때문에 동적 스코프라고 부른다. 
	> 2. 함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정한다. 
		이 방식을 '렉시컬 스코프'라고 한다. 혹은 '정적 스코프'라고 한다. 동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 ㅇ낳고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되기 때문에 정적스코프라고 부른다. 

	== JS는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는 지에 따라서 상위 스코프를 결정한다. 함수가 호출된 위치는 사우이 스코프 결정에 어떠한 영향도 주지 았는다. 
	즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프이다. 이처럼 함수의 상위 스코프는 함수 정의가 실행될 떄 정적으로 결정된다. 함수 정의(함수 선언문 또는 함수 표현식)가  실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다. 
	함수가 홏룰될 때마다 함수의 상위 스코프를 참조할 필요가 있기 떄문이다. 


	~ 렉시컬 스코프는 클로저와 깊은 관계가 있다. 
*/











// Life Cycle
/*
	function foo(){
		var x = 'local';
		console.log(x) // local
		return x;
	}

	foo();
	console.log(x) // ReferenceError: x is not defined

	지역변수 x는 foo함수가 호출되기 이전까지는 생성되지 않는다. foo 함수를 호출하지 않으면 함수 내부의 변수 선언문이 실행되지 않기 떄문이다. 

	일반적으로 변수의 생명주기는 메모리공간이 확보(allocate)된 시점부터 메모리 공간이 해제(release)되어 가용 메모리 풀(memory pool)이 반환되는 시점까지이다. 
	함수 내부의 변수는 함수가 실행되는 시점에 함수가 생성한 스코프에 등록되어 함수가 생성한 렉시컬 환경이 소멸될 떄까지 유효하다. 할당된 메모리 공간은 더 이상 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다. 
	만약, 누군가 해당 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남는다는 소리이다. 

	이는 스코프도 마찬가지이다. 누군가 스코프를 참조하고 있으면 스코프는 소멸하지 않고 생존하게 된다. 
*/




// > 지역 변수의 생명 주기
var x = 'global';
function food(){
	console.log(x); // >> undefined
	var x = 'local';
}
food();
console.log(x);//global

//이처럼 호이스팅은 스코프를 단위로 동작한다. 

// > 전역 변수의 생명 주기
/*
	var키워드로 만든 변수는 전역객체 (브라우저 = window , Node.js = global)가 생존할 때까지 유효하다. 
	(전역 코드는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 떄 종료한다.)


	1. 암묵적 결합
		- 전역 변수를 선언한 의도는 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것이다. 이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는
		암묵적 결합을 허용하는 것이다. 그러나 변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다. 
	2. 긴 생명 주기
		- 전역변수는 생명 주기가 길다. 따라서 리소스도 오랜 시간 점유한다. 또한 전역 변수의 상태를 변경할 수 있는 시간도 길고 기회도 많다. 더욱이 생명 주기가 긴 
		전역변수는 변수 이름이 중복될 가능성이 높다. 변수 이름이 중복되면 의도치 않은 재할당이 이뤄진다. 

		ex)
			var x = 1;
			
			(...여러 내용들이 있다.....)

			var x = 100;
			console.log(x); //100

	3. 스코프 체인 상에서 종점에 존재
		- 전역 변수는 스코프 체인 상에서 종점에 존재한다. 이는 변수를 검색할 떄 가장 마지막에 검색된다는 것을 의미한다. 즉, 전역 변수는 검색 속도가 가장 느리다. 

	4. 네임 스페이스 오염
		- JS는 파일이 분리되어있어도 하나의 전역 스코프를 공유한다. 따라서 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 초래할 수 있다. 
*/




// 전역 변수의 사용을 억제하는 방법 

/*
	전역 변수를 반드시 사용해야할 이유를 찾지 못한다면 지역 변수를 사용해야 한다. 변수의 스코프는 좁을수록 좋다. 

	1. 즉시 실행 함수
		- 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행함수의 지역변수가 된다. 
		ex)
			(function(){
				var foo = 10;
				....

			}());

			console.log(foo); //ReferenceError: foo is not defined.  > 이 방법을 사용하면 전역변수를 생성하지 않으므로 라이브러리 등에 자주 사용된다.

	2. 네임스페이스 객체
		- 전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다. 
		ex)
			var MYAPP = {}; //전역 네임스페이스 객체
			MYAPP.name = 'lee'
			console.log(MYAPP.name); // lee

		- 네임스페이스 객체에 또 다른 네임스페이스 객체를 프로퍼티로 추가해서 네임스페이스를 계층적으로 구성할 수 있다. 
		ex) 	
			var myApp = {};
			myApp.person = {
				name : 'lee',
				address: 'Seoul',
			};

			console.log(myApp.person.name); // lee

		> 네임스페이스를 분리해서 식별자 충돌을 방지하는 효과는 있으나 네임스페이스 객체 자체가 전역 변수에 할당되므로 그다지 유용해 보이지는 않는다. 

	3. 모듈 패턴
		- 모듈 패턴은 클래스를 모방해서 관련이 있는 벼수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다. 모듈 패턴은 자바스크립트의 강력한 기능인 클로저를 기반으로 동작한다. 
		모듈 패턴의 특징은 전역 변수의 억제 뿐만 아니라 캡슐화까지 구현할 수 있다. 단, 모듈 패턴을 이해하려면 클로저를 먼저 이해해야한다. 

			(캡슐화는 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는 것을 말한다. 캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉이라고 한다. )
		
		- 자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않는다. 모듈패턴은 전역 네임스페이스의 오염을 막는 기능은 물론 한정적이기는 하지만 정보 은닉을 구현하기 위해 사용한다. 

		ex)	
			var Counter = (function(){
				var number = 0; //private 변수
				
				//외부로 공개할 데이터나 메소드를 프로퍼티에 추가한 객체를 반환한다.

				return {
					increase(){
						return ++numer;
					},
					decrease(){
						return --number;
					}
				}
			}());

			console.log(Counter.number); //undefined
			console.log(Counter.increase()); //1
			console.log(Counter.increase()); //2
			console.log(Counter.decrease()); //1
			console.log(Counter.decrease()); //0

		객체의 프로퍼티는 외부에 노출되는 public이고
		반환에 추가하지 않으면 private이 된다.


	3. ES6 모듈
		- ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다. 따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며, window 객체의 프로퍼티도 아니다. 

		ex)
			<script type="module" src="lib.mjs"></script>
			<script type="module" src="app.mjs"></script>
		와 같이 type에 module attribute를 추가하면 로드된 자바스크립트 파일은 모듈로 작동한다. 모듈 파일의 확장자는 mjs를 권장한다.

		!! ES6 모듈은 IE를 포함한 구형 브라우저에서는 작동하지 않으며, 브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하기 때문에 아직까지는 브라우저가 지원하는 ES6모듈 기능 보다는 
		Webpack 등의 모듈 번들러를 사용하는 것이 일반적이다. 
*/