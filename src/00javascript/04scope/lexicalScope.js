// Lexical Scope

var x = 1;
function foo(){
	var x = 10;
	bar();
}

function bar(){
	console.log(x);
}

foo();
bar();

//결과는?

/*
	> 1. 함수를 어디서 호출했는자에 따라 함수의 상위 스코프를 결정한다.
		이 방식을 '동적 스코프'라고 한다. 함수를 정의하는 시점에는 함수가 어디서 호출될지 알 수 없다. 따라서 함수가 호출되는 시점에 동적으로 상위 스코프를 결정해야하기 때문에 동적 스코프라고 부른다. 
	> 2. 함수를 어디서 정의했는지에 따라 함수의 상위 스코프를 결정한다. 
		이 방식을 '렉시컬 스코프'라고 한다. 혹은 '정적 스코프'라고 한다. 동적 스코프 방식처럼 상위 스코프가 동적으로 변하지 ㅇ낳고 함수 정의가 평가되는 시점에 상위 스코프가 정적으로 결정되기 때문에 정적스코프라고 부른다. 

	== JS는 렉시컬 스코프를 따르므로 함수를 어디서 호출했는지가 아니라 함수를 어디서 정의했는 지에 따라서 상위 스코프를 결정한다. 함수가 호출된 위치는 사우이 스코프 결정에 어떠한 영향도 주지 았는다. 
	즉, 함수의 상위 스코프는 언제나 자신이 정의된 스코프이다. 이처럼 함수의 상위 스코프는 함수 정의가 실행될 떄 정적으로 결정된다. 함수 정의(함수 선언문 또는 함수 표현식)가  실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다. 
	함수가 홏룰될 때마다 함수의 상위 스코프를 참조할 필요가 있기 떄문이다. 


	~ 렉시컬 스코프는 클로저와 깊은 관계가 있다. 
*/