//배열 
/**
 * 배열은 여러 개의 값을 순차적으로 나열한 자료구조이다. 배열은 사용빈도가 매우 높은 가장 기본적인 자료구조이다.
 * 
 * 자바스크립트에서 배열이라는 타입의 존재하지 않는다. 배열은 객체 타입이다. 
 * 배열은 배열 리터럴, Array 생성자, Array.of, Array.from 메소드를 생성할 수 있다. 
 * 배열의 생성자 함수는 Array이며, 배열의 프로토타입 객체는 Array.prototype이다. 
 * Array.prototype은 배열을 위한 빌트인 메소드를 제공한다. 
 */

const arrExam = [1,2,3];
console.log(arrExam.constructor === Array);//true
console.log(Object.getPrototypeOf(arrExam) ===Array.prototype); //true

// 배열은 객체지만 일반 객체와는 구별되는 독특한 특징이 있다.
/**
 * 	구분		객체			배열
 * 	구조	   프로퍼티 키와 프로퍼티 값 	  인덱스와 요소
 *    값의 참조	    	프로퍼티 키 		   인덱스
 *    값의 순서 	   X			  O
 *    length 프로퍼티      X                      O
 * 
 *  일반 객체와 배열을 구분하는 가장 명확한 차이는 값의 순서와 length 프로퍼티이다. 
 * 인덱스로 표현되는 값의 순서와 length 프로퍼티를 갖는 배열은 반복문을 통해 순차적으로 값에 접근하기 적합한 자료구조이다. 
 * 
 * 배열의 장점은 처음부터 순차적으로 요소에 접근할 수도 있고, 마지막부터 역순으로 요소에 접근할 수도 있으며, 특정 위치부터 순차적으로 요소에 접근할 수도 있다는 것이다.
 * 이는 배열이 인덱스, 즉 값의 순서와 length 프로퍼티를 갖기 떄문에 가능한 것이다.
 * 
 * 
 */



//자바스크립트 배열은 배열이 아니다.
/**
 * 자료 구조에서 말하는 배열은 동일한 크기의 메모리 공간이 빈틈없이 연속적으로 나열되 자료구조를 말한다. 
 * 즉, 배열의 요소는 하나의 데이터 타입으로 통일되어 있으며 서로 연속적으로 인접해 있다. 
 * 이러한 배열을 밀집 배열이라고 한다. 
 * 
 * 이처럼 일반적인 의미의 배열은 각 요소가 동일한 데이터 크기를 가지며, 빈틈없이 연속적으로 이어져 있으므로 
 * 인덱스를 통해 단 한 번의 연산으로 임의의 요소 접근할 수 있다. (시간 복잡도 O(1))
 * 이는 매우 효율적이다. 
 * 
 * >> 검색 대상 요소의 메모리 주소 = 배열의 시작 메모리 주소 + (인덱스 * 요소의 바이트 수)
 * 이처럼 배열은 인덱스를 통해 효율적으로 요소에 접근할 수 있다는 장점이 있다. 하지만 정렬되지 ㅇ낳는 배열에서 특정하 ㄴ요소를 검색하는 경우
 * 배열의 모든 요소를 처음부터 특정 요소를 발견할 때까지 차례대로 검색(선형 검색, 시간복잡도 O(n))해야 한다. 
 * 또한 배열에 요소를 삽입하거나 삭제하는 겨웅 배열의 요소를 연속적으ㅗㄹ 유지하기 위해 요소를 이동시켜야하는 단점도 있다. 
 * 
 * 
 * 
 * 
 * >>> 자바스크립트의 배열은 지금까지 살펴본 자료구조에서 말하는 일반적인 의미의 배열과 다르다. 
 * 배열의 요소를 위한 각각의 메모리 공간은 동일한 크기를 갖지 않아도 되며, 연속적으로 이어져 있지 않을 수도 있다. 
 * 배열의 요소가 연속적으로 이어져 있지 않는 배열을 희소 배열이라고 한다. 
 * 이처럼 자바스크립트의 배열은 엄밀히 말하면 일반적인 의미의 배열이 아니다. 자바스크립트의 배열은 일반적인 배열의 동작을 흉내 낸 특수한 객체이다.
 */
 console.log(Object.getOwnPropertyDescriptors([1,2,3]));

 /*
	{
		'0': { value: 1, writable: true, enumerable: true, configurable: true },
		'1': { value: 2, writable: true, enumerable: true, configurable: true },
		'2': { value: 3, writable: true, enumerable: true, configurable: true },
		length: { value: 3, writable: true, enumerable: false, configurable: false }
	}

	이처럼 자바스크립트 배열은 인덱스를 나타내느 ㄴ문자열을 프로퍼티 키로 가지며, length 프로퍼티를 갖는 특수한 객체이다. 
	자바스크립트 배열 요소는 사실 프로퍼티 값이다. 
	자바스크립트에서 사용할 수 있는 모든 값은 객체의 프로퍼티 값이 될 수 있으므로 어떤 타입의 값이라도 배열의 요소가 될 수 있다. 
 */

	const anyArr = [
		"String",
		10,
		true,
		null,
		undefined,
		NaN,
		Infinity,
		[],
		{},
		function(){}
	];
/**
 * 일반적인 배열과 자바스크립트 배열의 장단점을 정리해보면
 * 
 * 1.  일반적인 배열은 인덱스로 요소에 빠르게 접근할 수 있다. 하지만 특정 요소를 검색하거나 요소를 삽입 또는 삭제하는 경우에는 효율적이지 않다.
 * 
 * 2. 자바스크립트 배열은 해시 테이블로 구현된 객체이므로 인덱스로 요소에 접근하는 경우 일반적인 배열보다 성능적인 면에서 느릴 수밖에 없는 구조적 단점이 있다. 
 * 하지만 특정 요소를 검색하거나 요소를 삽입, 삭제하는 경우에는 일반적인 배열보다 빠른 성능을 기대할 수 있다.
 * 
 * 
 * >>>>>
 * 
 * 즉 자바스크립트 배열은 인덱스로 배열 요소에 접근하는 경우에는 일반적인 배열보다 느리지만 특정 요소를 검색하거나 요소를 삽입, 삭제하는 경우에는 일반적인 배열보다 빠르다. 
 * 인덱스로 배열 요소에 접근할 때 일반적인 배열보다 느릴 수밖에 없는 구조적인 단점을 보완하기 위해 대부분은 자바스크립트 엔진은 배열을 더 배열처럼 동작하도록 최적화했다.
 * 
 */

const arrs = [];
console.time("ARRAY")
for(let i = 0; i<100000000; i++){
	arrs[i] = i;
}
console.timeEnd("ARRAY")

const obj = {};
console.time("OBJECT")
for(let i = 0; i<100000000; i++){
	obj[i] = i;
}
console.timeEnd("OBJECT")

// ARRAY: 1.909s
// OBJECT: 3.187s








//Length 프로퍼티와 희소 배열 
/**
 * length 프로퍼티는 요소의 개수, 즉 배열의 길이를 나타내는 0 이상의 정수를 값으로 갖는다.
 */