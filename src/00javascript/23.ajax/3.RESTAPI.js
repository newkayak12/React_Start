//REST API
/**
 * REST API(REpresentational State Transfer)는 HTTP/1.0과 1.1의 스펙 작성에 참여했고 아파치 HTTP 서버 프로젝트의 공동 설립자의 논문에서 처음 소개되었다.
 * HTTP의 장점을 최대한 활용할 수 있는 아키텍처로 REST를 소개헀고 이는 HTTP 프로토콜을 의도에 맞게 디자인하도록 유도하고 있다. REST의 기본 원칙을 성실히 지킨 서비스 디자인을 RESTful이라고 한다. 
 * 
 * 즉, REST는 HTTP를 기반으로 클라이언트가 서버의 리소스에 접근하는 방식을 규정한 아키텍처고, REST API는 REST를 기반으로 서비스 API를 구현한 것을 의미한다. 
 * 
 * //> REST API의 구성
 * 	REST API는 자원(resource), 행위(verb), 표현(representations)의 3가지 요소로 구성된다. REST는 자체 표현 구조(self-descriptiveness)로 구성되어 REST API만으로 HTTP 내용을 이해할 수 있다.
 * 
 * 
 * 		구성 요소 		내용					표현 방법
 * -----------------------------------------------------------------------------
 * 		자원				자원					URI(엔드 포인트)
 * 		행위			자원에 대한 행위			   HTTP 요청 메소드
 * 		표현			자원에 대한 행위의 구체적 내용	 페이로드
 * ------------------------------------------------------------------------------
 * 
 * //> REST API 설계 원칙
 * 	REST에서 가장 중요한 기본 원칙은 두 가지이다. URI는 리소스를 표현하는 데 집중하고 행위에 대한 정의는 HTTP 요청 메소드를 통해 하는 것이 RESTful API를 설계하는 중심 규칙이다.
 * 
 * 1. URI는 리소스를 표현해야한다.
 * 	: URI는 리소스를 표현하는 데 중점을 두어야한다. 리소스를 식별할 수 있는 이름은 동사보다는 명사를 사용한다. 따라서 이름에 get같은 행위에 대한 표현이 들어가서는 안된다.
 * 
 * #bad 
 * 	GET /getTodos/1
 * 	GET /todos/show/1
 * 
 * #good
 * 	GET /todos/1
 * 
 * 2. 리소스에 대한 행위는 HTTP 요청 메소드로 표현한다.
 * : HTTP 요청 메소드는 클라이언트가 서버에게 요청의 종류와 목적(리소스에 대한 행위)을 알리는 방법이다. 주로 5가지 요청 메소드 (get, post, put, patch, delete 등)를 사용하여 CRUD를 구현한다.
 * 리소스에 대한 행위는 HTTP 요청 메소드를 통해 표현하며 URI에 표현하지 않는다. 예를 들어 리소스를 취득하는 경우에는 get, 리소스를 삭제하는 경우에는 delete를 사용하여 리소스에 대한 행위를 명확히 표현한다.
 * 
 * #bad
 * GET /todos/delete/1
 * 
 * #good
 * DELTE /todos/1
 * 
 * 
 * 
 * >> REST API 요청 메소드
 * GET : 리소스에서 모든 요소를 취득(index)한다.
 * POST: 리소스에 새로운 요소를 생성한다. POST 요청 시에는 setRequestHeader 메소드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드 MIME 타입을 지정해야한다.
 * PUT : PUT은 특정 리소스 전체를 교체할 때 사용한다. PUT 요청 시에는 setRequestHeader메소드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야한다.
 * PATCH : 특정 리소스의 일부를 수정할 떄사용한다. PATCH 요청 시에는 setRequestHeader 메소드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야한다.
 */