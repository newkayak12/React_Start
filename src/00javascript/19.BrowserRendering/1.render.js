//브라우저의 렌더링 과정
/**
 * 브라우저가 HTML, CSS, JS로 작성된 텍스트 문서를 어떻게 파싱해서 브라우저에 렌더링하는지 살펴보자
 * 
 * 
 *   * 파싱 (구문 분석) : 프로그래밍 언어의 문법에 맞게 작성된 텍스트 문서를 읽어 들여 실행하기 위해 텍스트 문자열을 토큰으로 분해 하고, 
 * 토큰에 문법적 의미와 구조를 반영하여 트리 구조의 자료구조인 파스 트리(parse tree/syntax tree)를 생성하는 일련의 과정을 말한다. 
 * 일반적으로 파싱이 완료된 이후에는 파스 트리를 기반으로 중간 언어인 바이트 코드를 생성하고 실행한다.
 * 
 * 
 *   * 렌더링 : 렝더링은 HTML,CSS, JS로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 의미한다.
 */ 
  
  
 // [ 브라우저의 렌더링 과정 ]
 /* 
 * 1. 브라우저는 HTML, CSS, JS, 이미지, 폰트 파일 등 렝더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다.
 * 2. 브라우저의 렌더링 엔지니은 서버로부터 응답된 HTML과 CSS를 파싱하여 DOM과 CSSOM을 생성하고 이들을 결합하여 렌더 트리를 생성한다.
 * 3. 브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST(Abstract Syntax Tree)를 생성하고 바이트 코드로 변환하여 실행한다. 이때 자바스크립트 DOM API를 통해 DOM 이나 CSSOM을 변경할 수 있다. 변경된 DOM과 CSSOM은 다시 렌더 트리로 결합된다.
 * 4. 렌더 트리를 기반으로 HTML 요소의 레이아웃을 계산하고 브라우저 화면에 HTML 요소를 페인팅한다. 
 * 
 */


 // [요청과 응답]
 /**
  * 브라우저의 행심 기능은 필요한 리소스(HTML, CSS, JS, 이미지, 폰트 등의 정적 파일 또는 서비스가 동적으로 생성한 데이터)를 서버에 요청하고 
  * 서버로부터 응답을 받아 브라우저에 시각적으로 렌더링하는 것이다. 즉, 렝더일에 필요한 리소스는 모두 서버에 존재하므로 필요한 리소스를 서버에 요청하고 서버가 응답한 리소스를 파싱하여 렌더링하는 것이다.
  * 
  * 서버에 요청을 전송하기 위해 브라우저는 주소창을 제공한다. 브라우저의 주소창에 URL을 입력하고 엔터키를 누르면 URL호스트 이름이 DNS를 통해 IP주소로 변환되고 이 IP 주소를 갖는 서버에게 요청을 전송한다. 
  */

 // URI : https://www.mydomain.com:80/docs/search?category=javascript&lang=ko#intro
 // URL : https://www.mydomain.com:80/docs/search
 // URN : www.mydomain.com:80/docs/search?category=javascript&lang=ko#intro
 // scheme(Protocol) : https
 // host(domain) : www.mydomain.com
 // port : 80
 // path : /docs/search
 // query(queryString) : category=javascript&lang=ko
 // fragment : #intro

 /**
  * 예를 들어, 브라우저 주소창에 https://poiemaweb.com을 입력하고 엔터를 누르면 루트 요청(스킴과 호스트 만으로 구성된 URI에 의한 요청)이 poiemaweb.com서버로 전송된다.
  *  루트 요청에는 명확히 리소스를 요청하는 내용이 없지만 일반적으로 서버는 루트 요처엥 대해 암묵적으로 index.html을 응답하도록 기본 설정되어 있다. 
  * 즉, https://poiemaweb.com은 https://poiemaweb.com/index.html과 같은 요청이다.
  * 
  * 따라서 서버는 루트 요청에 대해 서버의 루트 폴더에 존재하는 정적 파일 index.html을 클라이언트(브라우저)로 응답한다. 
  * 만약 index.html이 아닌 다른 정적 파일을 서버에 요청하려면 브라우저 주소창에 https://poiemaweb.com/assets/data/data.json과 같이 요청할 정적 파일의 경로 (서버의 루트 폴더 기준)와 파일 이름을 URI의 호스트 뒤의 패스에 기술하여 서버에 요청한다. 그러면 서버는 루트 폴터의 assets/data 폴더 내에 있는 정적 파일 data.json을 응답할 것이다. 
  * 
  * 반드시 브라우저의 주소창을 통해 서버에게 정적 파일만을 요청할 수 있는 것은 아니다. 자바스크립트를 통해 동적으로 서버에 정적/동적 데이터를 요청할 수도 있다.
  */




 // HTTP1.1과 HTTP2.0
 /**
  * HTTP(HyperText Transfer Protocol)는 웹에서 브라우저와 서버가 통신하기 위한 프로토콜(규약)이다. 1989년 HTML, URL과 함꼐 고안한 HTTP는 1991년 최초로 문서화 되었고 1996년 HTTP/1.0, 1999년 HTTP/1.1, 2015년 HTTP/2가 발표되었다.
  * 
  * HTTP/1.1은 기본적으로 커넥션 당 하나의 요청과 응답만 처리한다. 즉, 여러 개의 요청을 한 번에 전송할 수 없고 응답 또한 마찬가지다. 따라서 HTML 문서 내에 포함된 여러 개의 리소스 요청, 즉 CSS파일을 로드하는 link 태그, 이미지 파일을 로드하는 img 태그, 자바스크립트를 로드하는 script 태그 등에 의한 리소스 요청이 개별적으로 전송되고 응답 또한 개별적으로 전송된다. 
  * 이처럼 HTTP/1.1은 리소스의 동시 전송이 불가능한 구조이므로 요청할 리소스의 개수에 비례하여 응답 시간도 증가하는 단점이 있다. 
  * 
  * 
  * HTTP/2는 커넥션당 여러 개의 요청과 응답, 즉 다중 요청/응답이 가능하다. 따라서 HTTP/2.0은 여러 리소스의 동시 전송이 가능하므로 HTTP/1.1에 비해 페이지 로드 속도가 빠르다.
  */



 //HTML 파싱과 DOM 생성
 /**
  * HTML
  * 브라우저의 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트다. 순수한 텍스트인 HTML 문서를 브라우저에 시각적인 픽셀로 렌더링하려면 HTML 문서를 브라우저가 이해할 수 있는 자료구조(객체)로 변환하여 메모리에 저장해야 한다. 
  * 
  * 브라우저의 렌더링 엔진은 HTML문서를 파싱하여 브라우저가 이해할 수 있는 자료 구조인 DOM(Document Object Model)을 생성한다.
  * 
  *  [ 바이트 > 문자 > 토큰 > 노드 > DOM ]
  * 
  * ~
  * 1. 서버에 존재하던 HTML 파일이 브라우저의 요청에 의해 응답된다. 이때 서버는 브라우저가 요청한 HTML파일을 읽어 들여 메모리에 저장한 다음 메모리에 저장된 바이트를 인터넷을 경유하여 응답한다.
  * 
  * 2. 브라우저는 서버가 응답한 HTML문서를 바이트 형태로 응답받는다. 그리고 응답된 바이트 형태의 HTML문서는 meta 태그의 charset 어트리뷰트에 의해 지정된 인코딩 방식을 기준으로 문자열로 변환된다.
  *  참고로 meta 태그의 charset 어트리뷰트에 선언된 인코딩 방식은 content-type:text/html; charset=utf-8과 같이 응답 헤더에 담겨 응답된다. 브라우저는 이를 확인하고 문자열로 반환한다.
  * 
  * 3. 문자열로 반환된  HTML문서를 읽어 들여 문법적 의미를 갖는 코드의 최소 단위인 토큰들로 분해한다.
  * 
  * 4. 각 토킅들을 객체로 반환하여 노드(node)들을 생성한다. 토큰의 내용에 따라 문서 노드, 요소 노드, 어트리뷰트 노드, 텍스트 노드가 생성된다. 노드는 이후 DOM을 구성하는 기본 요소가 된다
  * 
  * 5. HTML 문서는 HTML 요소들의 집합으로 이루어지며 HTML 요소는 중첩 관계를 갖는다. 즉, HTML 요소의 콘텐츠 영역(시작 태그와 종료 태그 사이)에는 텍스트뿐만 아니라 다른 HTML 요소도 포함될 수 있다. 이때 HTML 요소 간에는 중첩 관계에 의해 부자 관계가 형성된다. 
  * 이러한 HTML 요소 간의 부자 관계를 반영하여 모든 노드들을 트리 자료 구조로 구성한다. 이 노드들로 구성된 트리 자료 구조를 DOM (Document Object Model)아라고 부른다.  
  * ~
  * 
  * 즉, DOM은 HTML문서를 파싱한 결과물이다.
  */



//  CSS 파싱과 CSSOM 생성
/**
 * 
 * 렌더링 엔진은 HTML을 처음부터 한 줄씩 순차적으로 파싱하여 DOM 을 생성해 나간다. 이처럼 렌더링 엔진은 
 * DOM을 생성해나가다가 CSS를 로드하는 LINK 나 style 태그를 만나면 DOM 생성을 일시 중단한다.
 * 
 * 그리고 link태그의 href 어트리뷰트에 지정된 css파일을 서버에 요청하여 로드한 css파일이나 style태그 내의 css를 HTML과 동일한 
 * 파싱 과정( 바이트 => 문자 => 토큰 => 노드 => CSSOM)을 거치며 해석하여 CSSOM(CSS Object Model)을 생성한다. 
 * 
 * 이후 CSS 파싱을 완료하면 HTML 파시이 중단된 지점부터 다시 HTML을 파싱하기 시작하여 DOM 생성을 재개한다. 
 */ 
    // <!DOCTYPE html>
    // <html>
    //     <head>
    //         <meta charset = "UTF-8">
    //             <link rel='stylesheet' href='style.css'/>

    //         </meta>
    //     </head>
    // </html>
 /** 
  * 
  * 렌더링 엔진은 meta태그까지 HTML을 순차적으로 해석한 다음, link 태그를 만나면 DOM 생성을 일시 중단하고 link 태그의
  * href 어트리뷰트에 지정된 css 파일을 서버에 요청한다. 
  * 
  * 서버로부터  css 파일이 응답되면 렌더링 엔진은 HTML과 동일한 해석 과정 (바이트 -> 문자 -> 토큰 -> 노드 -> CSSOM)을 거쳐
  * CSS를 파싱하여 CSSOM을 생성한다. 
  * 
  * CSSOM은 CSS의 상속을 반영하여 생성된다. (body 태그에 css를 걸면 그 하위에 모두 적용하는 식으로 말이다.)
  * 
  */



 //  렌더 트리 생성
 /**
  * 
  * 렌더링 엔진은 서버로부터 응답된 HTML과 CSS를 파싱하여 각각 DOM과 CSSOM를 생성한다.
  * 그리고 DOM 과 CSSOM은 렌더링을 위해 렌더 트리로 결합된다. 
  * 
  * 렌더 트리는 렌더링을 위한 트리 구조의 자료구조이다. 따라서 브라우저 화면에  렝더링되지 않는 노드(meta태그, script 태그 등)
  * 와 css에 의해 비표시 되는 노드들은 포함하지 않는다. 
  * 즉, 렌더 트리는 브라우저 화면에 렌더링되는 노드만으로 구성된다. 
  * 
  * 위와 같은 브라우저의 렌더링 과정은 반복해서 실행될 수 있다. 아래의 예시와 같은 경우 반복해서
  * 레이아웃 계산과 패인틴이 재차 실행된다. 
  * 
  *         [
  *             1. 자바스크립트에 의한 노드 추가 및 삭제
  *             2. 브라우저 창의 리사이징에 의한 뷰포트 크기 변경
  *             3. HTML요소의 레이이아웃 (위치, 크기)에 변경을 발생시키는 width/height, margin, padding, border
  *               display, position, top/right/bottom/left 등의 스타일 변경
  *         ]
  * 
  * 레이아웃 계산과 페인팅을 다시 실행하는 리린더링은 비용이 많이 드는 성능에 악영향을 주는 작업이다.
  * 따라서 가급적 리렌더링이 빈번하지 않도록 주의할 필요가 있다. 
  * 
  */